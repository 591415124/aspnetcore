@using WeatherForecast = Pages.GridRendering.WeatherForecast

<td @attributes="@Attributes"
    @onclick="@(() => OnClick.Invoke(CellIndex))"
    >
    @switch (Field)
    {
        case "Date":
            @Item.Date.ToShortDateString()
            break;
        case "TemperatureC":
            @Item.TemperatureC
            break;
        case "TemperatureF":
            @Item.TemperatureF
            break;
        case "Summary":
            @Item.Summary
            break;
    }
</td>

@code {
    [Parameter]
    public WeatherForecast Item { get; set; }

    [CascadingParameter]
    public TableComponent ParentTable { get; set; }

    [Parameter]
    public string Field { get; set; }

    [Parameter]
    public int CellIndex { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public string FormatString { get; set; }

    [Parameter]
    public Func<int, Task> OnClick { get; set; }

    private void WriteSingleParameter(string paramName, object value)
    {
        switch (paramName[0])
        {
            case 'I':
            case 'i':
                if (string.Equals(paramName, "Item", StringComparison.OrdinalIgnoreCase))
                {
                    Item = (WeatherForecast)value;
                    return;
                }
                break;
            case 'P':
            case 'p':
                if (string.Equals(paramName, "ParentTable", StringComparison.OrdinalIgnoreCase))
                {
                    ParentTable = (TableComponent)value;
                    return;
                }
                break;
            case 'F':
            case 'f':
                switch (paramName[1])
                {
                    case 'I':
                    case 'i':
                        if (string.Equals(paramName, "Field", StringComparison.OrdinalIgnoreCase))
                        {
                            Field = (string)value;
                            return;
                        }
                        break;
                    case 'O':
                    case 'o':
                        if (string.Equals(paramName, "FormatString", StringComparison.OrdinalIgnoreCase))
                        {
                            FormatString = (string)value;
                            return;
                        }
                        break;
                }
                break;
            case 'C':
            case 'c':
                if (string.Equals(paramName, "CellIndex", StringComparison.OrdinalIgnoreCase))
                {
                    CellIndex = (int)value;
                    return;
                }
                break;
            case 'R':
            case 'r':
                if (string.Equals(paramName, "RowIndex", StringComparison.OrdinalIgnoreCase))
                {
                    RowIndex = (int)value;
                    return;
                }
                break;
            case 'S':
            case 's':
                if (string.Equals(paramName, "Selected", StringComparison.OrdinalIgnoreCase))
                {
                    Selected = (bool)value;
                    return;
                }
                break;
            case 'O':
            case 'o':
                if (string.Equals(paramName, "OnClick", StringComparison.OrdinalIgnoreCase))
                {
                    OnClick = (Func<int, Task>)value;
                    return;
                }
                break;
        }
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var param in parameters)
        {
            WriteSingleParameter(param.Name, param.Value);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private protected Dictionary<string, object> Attributes
    {
        get
        {
            var attributes = new Dictionary<string, object>();

            attributes["tabindex"] = CellIndex;

            return attributes;
        }
    }
}
