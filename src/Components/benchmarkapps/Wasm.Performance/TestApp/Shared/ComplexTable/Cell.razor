@using WeatherForecast = Pages.GridRendering.WeatherForecast

<td @attributes="@Attributes"
    @onclick="@(() => OnClick.Invoke(CellIndex))"
    >
    @switch (Field)
    {
        case "Date":
            @Item.Date.ToShortDateString()
            break;
        case "TemperatureC":
            @Item.TemperatureC
            break;
        case "TemperatureF":
            @Item.TemperatureF
            break;
        case "Summary":
            @Item.Summary
            break;
    }
</td>

@code {
    [Parameter]
    public WeatherForecast Item { get; set; }

    [CascadingParameter]
    public TableComponent ParentTable { get; set; }

    [Parameter]
    public string Field { get; set; }

    [Parameter]
    public int CellIndex { get; set; }

    [Parameter]
    public int RowIndex { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public string FormatString { get; set; }

    [Parameter]
    public Func<int, Task> OnClick { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var param in parameters)
        {
            var paramName = param.Name;
            switch (paramName[0])
            {
                case 'I':
                case 'i':
                    if (string.Equals(paramName, "Item", StringComparison.OrdinalIgnoreCase))
                    {
                        Item = (WeatherForecast)param.Value;
                        continue;
                    }
                    break;
                case 'P':
                case 'p':
                    if (string.Equals(paramName, "ParentTable", StringComparison.OrdinalIgnoreCase))
                    {
                        ParentTable = (TableComponent)param.Value;
                    }
                    break;
                case 'F':
                case 'f':
                    switch (param.Name[1])
                    {
                        case 'I':
                        case 'i':
                            if (string.Equals(paramName, "Field", StringComparison.OrdinalIgnoreCase))
                            {
                                Field = (string)param.Value;
                            }
                            break;
                        case 'O':
                        case 'o':
                            if (string.Equals(paramName, "FormatString", StringComparison.OrdinalIgnoreCase))
                            {
                                FormatString = (string)param.Value;
                            }
                            break;
                    }
                    break;
                case 'C':
                case 'c':
                    if (string.Equals(paramName, "CellIndex", StringComparison.OrdinalIgnoreCase))
                    {
                        CellIndex = (int)param.Value;
                    }
                    break;
                case 'R':
                case 'r':
                    if (string.Equals(paramName, "RowIndex", StringComparison.OrdinalIgnoreCase))
                    {
                        RowIndex = (int)param.Value;
                    }
                    break;
                case 'S':
                case 's':
                    if (string.Equals(paramName, "Selected", StringComparison.OrdinalIgnoreCase))
                    {
                        Selected = (bool)param.Value;
                    }
                    break;
                case 'O':
                case 'o':
                    if (string.Equals(paramName, "OnClick", StringComparison.OrdinalIgnoreCase))
                    {
                        OnClick = (Func<int, Task>)param.Value;
                    }
                    break;
            }
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private protected Dictionary<string, object> Attributes
    {
        get
        {
            var attributes = new Dictionary<string, object>();

            attributes["tabindex"] = CellIndex;

            return attributes;
        }
    }
}
